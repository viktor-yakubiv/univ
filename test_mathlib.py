import pytest
import random

from fractions import Fraction as Fr
from math import pi, sin
from .mathlib import bernoulli, cosec


def test_bernoulli():
    bernoulli_numbers = (
        (0, Fr(1, 1)),
        (1, Fr(1, 2)),
        # (1, Fr(-1, 2)),
        (2, Fr(1, 6)),
        (4, Fr(-1, 30)),
        (6, Fr(1, 42)),
        (8, Fr(-1, 30)),
        (10, Fr(5, 66)),
        (12, Fr(-691, 2730)),
        (14, Fr(7, 6)),
        (16, Fr(-3617, 510)),
        (18, Fr(43867, 798)),
        (20, Fr(-174611, 330)),
        (22, Fr(854513, 138)),
        (24, Fr(-236364091, 2730)),
        (26, Fr(8553103, 6)),
        (28, Fr(-23749461029, 870)),
        (30, Fr(8615841276005, 14322)),
        (32, Fr(-7709321041217, 510)),
        (34, Fr(2577687858367, 6)),
        (36, Fr(-26315271553053477373, 1919190)),
        (38, Fr(2929993913841559, 6)),
        (40, Fr(-261082718496449122051, 13530)),
        (42, Fr(1520097643918070802691, 1806)),
        (44, Fr(-27833269579301024235023, 690)),
        (46, Fr(596451111593912163277961, 282)),
        (48, Fr(-5609403368997817686249127547, 46410)),
        (50, Fr(495057205241079648212477525, 66)),
        (52, Fr(-801165718135489957347924991853, 1590)),
        (54, Fr(29149963634884862421418123812691, 798)),
        (56, Fr(-2479392929313226753685415739663229, 870)),
        (58, Fr(84483613348880041862046775994036021, 354)),
        (60, Fr(-1215233140483755572040304994079820246041491, 56786730)),
        (62, Fr(12300585434086858541953039857403386151, 6)),
        (64, Fr(-106783830147866529886385444979142647942017, 510)),
        (66, Fr(1472600022126335654051619428551932342241899101, 64722)),
        (68, Fr(-78773130858718728141909149208474606244347001, 30)),
        (70, Fr(1505381347333367003803076567377857208511438160235, 4686)),
        (72, Fr(-5827954961669944110438277244641067365282488301844260429, 140100870)),
        (74, Fr(34152417289221168014330073731472635186688307783087, 6)),
        (76, Fr(-24655088825935372707687196040585199904365267828865801, 30)),
        (78, Fr(414846365575400828295179035549542073492199375372400483487, 3318)),
        (80, Fr(-4603784299479457646935574969019046849794257872751288919656867, 230010)),
        (82, Fr(1677014149185145836823154509786269900207736027570253414881613, 498)),
        (84, Fr(-2024576195935290360231131160111731009989917391198090877281083932477, 3404310)),
        (86, Fr(660714619417678653573847847426261496277830686653388931761996983, 6)),
        (88, Fr(-1311426488674017507995511424019311843345750275572028644296919890574047, 61410)),
        (90, Fr(1179057279021082799884123351249215083775254949669647116231545215727922535, 272118)),
        (92, Fr(-1295585948207537527989427828538576749659341483719435143023316326829946247, 1410)),
        (94, Fr(1220813806579744469607301679413201203958508415202696621436215105284649447, 6)),
        (96, Fr(-211600449597266513097597728109824233673043954389060234150638733420050668349987259, 4501770)),
        (98, Fr(67908260672905495624051117546403605607342195728504487509073961249992947058239, 6)),
        (100, Fr(-94598037819122125295227433069493721872702841533066936133385696204311395415197247711, 33330)),
    )

    for k, actual in bernoulli_numbers:
        result = bernoulli(k)
        assert bernoulli(k) == actual, 'for k={}'.format(k)


def test_cosec():
    # limit values
    for x in [0, -2 * pi, -pi, pi, 2 * pi]:
        pytest.raises(ValueError, cosec, x)

    # random values
    precision = 0

    # random.seed(2202)
    for x in [random.uniform(-pi, pi) for x in range(10)]:
        actual = cosec(x, precision=precision)
        expected = 1 / sin(x)
        assert pytest.approx(actual) == expected, 'for x={}'.format(x)
